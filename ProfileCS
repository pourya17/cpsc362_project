using System;
using System.Collections.Generic;
using System.Diagnostics.Eventing.Reader;
using System.Linq;
using System.Security.Policy;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using Newtonsoft.Json;
using System.IO;
using System.Transactions;

public class userData
{
    public int age { get; set; }
    public char gender { get; set; }
    public int height_ft { get; set; }
    public float height_inch { get; set; }
    public int goal_index { get; set; }
    public int activity_index { get; set; }
    public float weight_lb { get; set; }
}

namespace ProjectApp
{

    /// <summary>
    /// Interaction logic for Window1.xaml
    /// </summary>
    ///

    public partial class Profile : Window
    {

        int age = 0;
        char gender = 'X';
        int height_ft = 0;
        float height_inch = 0;
        float height = 0;
        double weight = 0;
        float weight_lb = 0;
        int activityLevel = -1;
        double bmr = 0;
        int goal_index = -1;
        int goal_adjustment = 0;
        int total_calories;
        int calorie_progress = 0;

        public void LoadData()
        {
            if (File.Exists("userdata.json"))
            {
                string json = File.ReadAllText("userdata.json");

                if (!string.IsNullOrWhiteSpace(json))
                {
                    try
                    {
                        userData? user = JsonConvert.DeserializeObject<userData>(json);

                        if (user != null)
                        {
                            age = user.age;
                            gender = user.gender;
                            weight_lb = user.weight_lb;
                            weight = Calculations.WeightToKg(ref weight_lb);
                            goal_index = user.goal_index;
                            activityLevel = user.activity_index;

                            height_ft = user.height_ft;
                            height_inch = user.height_inch;
                            height = Calculations.HeightToCm(ref height_ft, ref height_inch);

                            HeightInputFt.Text = height_ft.ToString();
                            HeightInputIn.Text = height_inch.ToString();
                            AgeInput.Text = age.ToString();
                            WeightInput.Text = weight_lb.ToString();
                            GoalBox.SelectedIndex = goal_index;
                            ActivityBox.SelectedIndex = activityLevel;
                            
                            if (gender == 'M')
                            {
                                GenderBox.SelectedIndex = 0;
                            } else
                            {
                                GenderBox.SelectedIndex = 1;    
                            }


                        }
                    }
                    catch (JsonException e)
                    {
                        Console.WriteLine(e.ToString());
                    }
                }

            }
        }
        
        public Profile()
        {
            InitializeComponent();
            this.Closing += Profile_Closing;
        }

        private void Profile_Closing(object? sender, System.ComponentModel.CancelEventArgs e)
        {
            var user = new userData { 
                age = age, 
                gender = gender, 
                height_ft = height_ft, 
                height_inch = height_inch, 
                goal_index = goal_index, 
                activity_index = activityLevel, 
                weight_lb = weight_lb
            };
            string json = JsonConvert.SerializeObject(user);
            File.WriteAllText("userdata.json", json);
        }

        private void bmrCalc()
        {
            if (age > 0 && weight > 0 && height > 0 && gender != 'X' && activityLevel != -1)
            {
                bmr = Calculations.BmrCalc(ref weight, ref height, ref gender, ref age);
                total_calories = Calculations.CalculateCalories(ref bmr, ref activityLevel, ref goal_adjustment);
                
                Cal_Label.Text = "Calories: " + total_calories.ToString();
            } else
            {
                Cal_Label.Text = "Calories: ";
            }
        }

        private void AgeInputChanged(object sender, TextChangedEventArgs args)
        {
            if (Regex.IsMatch(AgeInput.Text, @"^\d+$"))
            {
                age = int.Parse(AgeInput.Text); 
                bmrCalc();
            }

        }
        private void GenderChanged(object sender, SelectionChangedEventArgs args)
        {
            if (GenderBox.SelectedIndex == 0)
            {
                gender = 'M';
            } else
            {
                gender = 'F';
            }
            bmrCalc();
        }
        private void HeightInputFtChanged(object sender, TextChangedEventArgs args)
        {
            if (Regex.IsMatch(HeightInputFt.Text, @"^\d+$"))
            {
                   height_ft = int.Parse(HeightInputFt.Text);

                if (HeightInputIn.Text.Length > 0)
                {
                    height_inch = float.Parse(HeightInputIn.Text);
                }

                height = Calculations.HeightToCm(ref height_ft, ref height_inch);
                bmrCalc();
            }
        }

        private void HeightInputInchChanged(object sender, TextChangedEventArgs args)
        {
            if (Regex.IsMatch(HeightInputIn.Text, @"^\d+$"))
            {
                height_inch = float.Parse(HeightInputIn.Text);

                if (HeightInputFt.Text.Length > 0)
                {
                    height_ft = int.Parse(HeightInputFt.Text);
                }

                height = Calculations.HeightToCm(ref height_ft, ref height_inch);
                bmrCalc();
            }
        }
        private void WeightInputChanged(object sender, TextChangedEventArgs args)
        {
            if (Regex.IsMatch(WeightInput.Text, @"^\d+$"))
            {
                    weight_lb = float.Parse(WeightInput.Text);
                    weight = Calculations.WeightToKg(ref weight_lb);
                    bmrCalc();
            }
        }
        private void ActivityLevelChanged(object sender, SelectionChangedEventArgs args)
        {
            if (ActivityBox.SelectedIndex == 0) 
            {
                activityLevel = 1;
            }
            else if (ActivityBox.SelectedIndex == 1)
            {
                activityLevel = 2;
            }
            else if (ActivityBox.SelectedIndex == 2)
            {
                activityLevel = 3;
            }
            else if (ActivityBox.SelectedIndex == 3)
            {
                activityLevel = 4;
            }
            else
            {
                activityLevel = 5;
            }
            bmrCalc();
        }
        private void GoalChanged(object sender, SelectionChangedEventArgs args)
        {
            if (GoalBox.SelectedIndex == 0)
            {
                goal_adjustment = 0;
                goal_index = 0;
            }
            else if (GoalBox.SelectedIndex == 1)
            {
                goal_adjustment = -250;
                goal_index = 1;
            }
            else if (GoalBox.SelectedIndex == 2)
            {
                goal_adjustment = -500;
                goal_index = 2;
            }
            else if (GoalBox.SelectedIndex == 3)
            {
                goal_adjustment = -1000;
                goal_index = 3;
            }
            else if (GoalBox.SelectedIndex == 4)
            {
                goal_adjustment = 250;
                goal_index = 4;
            }
            else if (GoalBox.SelectedIndex == 5)
            {
                goal_adjustment = 500;
                goal_index = 5;
            }
            else
            {
                goal_adjustment = 1000;
                goal_index = 6;
            }
            bmrCalc();
        }
    }

}
